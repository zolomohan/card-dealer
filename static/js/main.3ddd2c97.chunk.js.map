{"version":3,"sources":["Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_transform","concat","Math","random","react_default","a","createElement","style","transform","className","src","imageUrl","alt","name","Component","API_BASE_URL","Deck","getCard","asyncToGenerator","regenerator_default","mark","_callee","cardResponse","card","wrap","_context","prev","next","setState","loading","axios","get","state","deck","deck_id","sent","data","success","Error","cards","currentState","drawn","toConsumableArray","id","code","image","suit","value","t0","remaining","stop","deckResponse","onClick","disabled","map","Card_Card","key","App","Deck_Deck","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ddd2c97.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\nexport default class Card extends Component {\r\n  constructor(props){\r\n  \tsuper(props);\r\n    this._transform = `translate(${Math.random() * 40 - 20}px, ${Math.random() * 40 - 20}px) rotate(${Math.random() * 90 - 45}deg)`;\r\n  }\r\n\r\n  render() {  \r\n    return (\r\n      <img \r\n        style = {{\r\n          transform: this._transform\r\n        }}\r\n        className=\"Card\" \r\n        src = {this.props.imageUrl} \r\n        alt = {this.props.name} \r\n      />\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport Card from './Card';\r\nimport './Deck.css'\r\n\r\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\r\n\r\nexport default class Deck extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n       deck: null,\r\n       drawn:[],\r\n       loading: true,\r\n       remaining: true\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n    let deckResponse = await axios.get(`${API_BASE_URL}/new/shuffle/?deck_count=1`);\r\n    this.setState({deck: deckResponse.data, drawn: [], loading: false})\r\n  }\r\n\r\n  getCard = async () => {\r\n    try{\r\n      this.setState({loading: true});\r\n      let cardResponse = await axios.get(`${API_BASE_URL}/${this.state.deck.deck_id}/draw/?count=1`);\r\n      if(!cardResponse.data.success)\r\n        throw new Error ('No more cards availabale in the deck!');\r\n      let card = cardResponse.data.cards[0];\r\n      this.setState(currentState => ({\r\n        drawn: [\r\n          ...currentState.drawn,\r\n          {\r\n            id: card.code,\r\n            image: card.image,\r\n            name: `${card.suit} ${card.value}`\r\n          },\r\n        ],\r\n        loading: false\r\n      }))\r\n    }\r\n    catch(error){\r\n      this.setState({loading: false});\r\n      this.setState({remaining: false})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='Deck'>\r\n        <h1> \r\n            <span className='Deck-icons Deck-black-club'>&spades;</span> <span className='Deck-icons Deck-red-club'>&hearts;</span> <span className='Deck-icons Deck-black-club'>&clubs;</span> <span className='Deck-icons Deck-red-club'>&diams;</span> Card Dealer <span className='Deck-icons Deck-red-club'>&diams;</span> <span className='Deck-icons Deck-black-club'>&clubs;</span> <span className='Deck-icons Deck-red-club'>&hearts;</span> <span className='Deck-icons Deck-black-club'>&spades;</span>\r\n        </h1>\r\n        {this.state.remaining \r\n            ?  <button \r\n                onClick = {this.getCard} \r\n                disabled = {this.state.loading}\r\n               >\r\n                   Get Card {this.state.loading && <div className='loader'></div>} \r\n               </button>\r\n\r\n            : <h1>No More Cards</h1>}\r\n        <div className='Deck-cards'>\r\n          {this.state.drawn.map(card => <Card key={card.id} imageUrl = {card.image} name = {card.name} />)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Deck from './Deck';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}